# -*- coding: utf-8 -*-
"""Cancer Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s0Av2_hXev7It0rHu7Clolp4XTlshT1H

#Analisis del problema
Se necesita clasificar los tumores cerebrales que puede tener una persona por medio de lo que se puede ver en una imagen del mismo tumor, estos se dividen en glioma, meningioma, no tumor y por ultimo pituitary.

## Authors
  

*   Gustavo Méndez

### Importar librerias
"""

# !pip install tensorflow-gpu==2.0.0.alpha0

import tensorflow as tf

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import random

tf.__version__

"""## PASO #2: Importar modelo con pesos preentrenados"""

model = tf.keras.applications.ResNet50(weights = 'imagenet')

"""## Paso #3: Evalúe el modelo pre-entrenado

- Check this out: http://www.image-net.org/synset?wnid=n02835271
- Search for Bicycle
- https://lear.inrialpes.fr/people/gordo/ImageNetResults/sift1000_accuracy_withPrior/results_sift_0253.htm
"""

!wget https://atlasanimal.com/wp-content/uploads/2021/02/elefante.jpg

!wget https://images-na.ssl-images-amazon.com/images/I/61SpjnjBTQL._AC_UL604_SR604,400_.jpg

Sample_Image= tf.keras.preprocessing.image.load_img(r'/content/elefante.jpg', target_size = (224, 224))

Sample_Image= tf.keras.preprocessing.image.load_img(r'/content/61SpjnjBTQL._AC_UL604_SR604,400_.jpg', target_size = (224, 224))

plt.imshow(Sample_Image)

Sample_Image = tf.keras.preprocessing.image.img_to_array(Sample_Image)

np.shape(Sample_Image)

Sample_Image = np.expand_dims(Sample_Image, axis = 0)
np.shape(Sample_Image)

Sample_Image.max()

Sample_Image.min()

Sample_Image = tf.keras.applications.resnet50.preprocess_input(Sample_Image)

Sample_Image.max()

Sample_Image.min()

predictions = model.predict(Sample_Image)

print('predictions:', tf.keras.applications.resnet50.decode_predictions(predictions, top = 5)[0])

"""## Paso #4: Aplicar aprendizaje de transferencia y reentrenar el modelo"""

base_model = tf.keras.applications.ResNet50(weights = 'imagenet', include_top = False)

print(base_model.summary())

for i, layer in enumerate(base_model.layers):
    print(i, layer.name)

# Top = False
# Total params: 23,587,712
# Layers = 174


# Top = True
# Total params: 25,636,712
# Layers = 176

# base_model = tf.keras.applications.ResNet50(weights = 'imagenet', include_top = True)

# print(base_model.summary())

# or i, layer in enumerate(base_model.layers):
#    print(i, layer.name)

x = base_model.output
x = tf.keras.layers.GlobalAveragePooling2D()(x)

x = tf.keras.layers.Dense(1024, activation = 'relu')(x)
x = tf.keras.layers.Dense(1024, activation = 'relu')(x)
x = tf.keras.layers.Dense(1024, activation = 'relu')(x)
x = tf.keras.layers.Dense(512, activation = 'relu')(x)
preds = tf.keras.layers.Dense(4, activation = 'softmax')(x)

model = tf.keras.models.Model(inputs = base_model.input, outputs = preds)

print(model.summary())

for i, layer in enumerate(model.layers):
    print(i, layer.name)

for layer in model.layers[:175]:
    layer.trainable = False

for layer in model.layers[175:]:
    layer.trainable = True

!wget https://www.dropbox.com/s/g0yjhk8738tzu3s/TrainingCancer.zip

!unzip TrainingCancer.zip

train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(preprocessing_function= tf.keras.applications.resnet50.preprocess_input)

train_generator = train_datagen.flow_from_directory('/content/Training',
                                                   target_size = (224, 224),
                                                   color_mode = 'rgb',
                                                   batch_size = 32,
                                                   class_mode = 'categorical',
                                                   shuffle = True)

model.compile(optimizer = 'Adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])

batch_size=50

history = model.fit(train_generator,steps_per_epoch=train_generator.samples / batch_size, epochs = 4)

"""# Paso #5: Evaluar el modelo"""

acc = history.history['accuracy']
loss = history.history['loss']

plt.figure()
plt.plot(acc, label='Training Accuracy')
plt.ylabel('Accuracy')
plt.title('Training Accuracy')

plt.figure()

plt.plot(loss, label='Training Loss')
plt.ylabel('Loss')
plt.title('Training Loss')
plt.xlabel('epoch')
plt.show()

!wget https://gitlab.com/ejimenez/cancer_img_4_types/-/archive/main/cancer_img_4_types-main.tar

!unzip cancer_img_4_types-main.tar

Sample_Image= tf.keras.preprocessing.image.load_img(r'/content/Testing/glioma/Te-glTr_0000.jpg', target_size = (224, 224))

Sample_Image= tf.keras.preprocessing.image.load_img(r'/content/Testing/notumor/Te-noTr_0000.jpg', target_size = (224, 224))

plt.imshow(Sample_Image)

Sample_Image = tf.keras.preprocessing.image.img_to_array(Sample_Image)
np.shape(Sample_Image)

Sample_Image = np.expand_dims(Sample_Image, axis = 0)

Sample_Image = tf.keras.applications.resnet50.preprocess_input(Sample_Image)
predictions = model.predict(Sample_Image)
print('Predictions:', predictions)

"""# Paso #6: #Conclusiones

La transferencia de aprendizaje es una tecnica bastante usado en el mercado, cuando no se tiene a mano poder computacional para hacer modelos robustos es una alternativa altamente selecionable.
"""